#!/bin/sh

# -------------------------- CUT THIS SECTION ---------------------------
#  This is a template to create a customized plugin
#
#  Each plugin should at least have several variables defined with the
#  prefix PLUGIN_* (see below)
#
#  If you want to learn what functions you can use, check include/functions
#
# -------------------------- CUT THIS SECTION ---------------------------

#########################################################################
#
#    * DO NOT REMOVE *
#-----------------------------------------------------
# PLUGIN_AUTHOR=___nancheal_nancheal@gmail.com___
# PLUGIN_CATEGORY=PWN
# PLUGIN_DESC=A test for check if current user can run a pwnable programs
# PLUGIN_NAME=check_pwnable_binary
# PLUGIN_REQUIRED_TESTS=
#-----------------------------------------------------
#
#########################################################################
pwnable_binary_filter(){
    pwnable_list=(apt-get apt ash awk base64 bash busybox cat cpulimit crontab csh curl cut dash dd diff docker ed emacs env expand expect find flock fmt fold ftp gdb git head ionice jq ksh ld.so less ltrace lua mail make man more mount mysql nano nc nice nl nmap node od perl pg php pico puppet python2 python3 red rlwrap rpm rpmquery rsync ruby scp sed setarch sftp shuf smbclient socat sort sqlite3 ssh stdbuf strace tail tar taskset tclsh tcpdump tee telnet tftp "time" timeout ul unexpand uniq unshare vi vim watch wget whois wish xargs xxd zip zsh)
    for each in ${pwnable_list[@]};
    do
      if [ "$1" == "$each" ];then
          return "1"
      fi
    done
}

split_string(){
    IFS=$1
    TO_SPLIT_STRING=$2
    echo $TO_SPLIT_STRING
}

check_pwnable_binary() {
    # define some constant
    IFS_OLD=$IFS
    SPLITCOMMA=', '
    SPLITSLASH='/'
    PWNABLE="0"
    # start 
    LogText "Test:obtain user available binary"
    binary_available=$(sudo -l | sed -n '$p')
    binary_split_comma=($(split_string "$SPLITCOMMA" "$binary_available"))
    for binary_absolute_path in ${binary_split_comma[@]};
    do
        binary_split_slash=($(split_string "$SPLITSLASH" "$binary_absolute_path"))
        binary_name=${binary_split_slash[${#binary_split_slash[@]}-1]}
        pwnable_binary_filter $binary_name
        PWNABLE=$?
        if [ "$PWNABLE" == "1" ];then
            IFS=$IFS_OLD
            Report "pwnable_programs[]=$binary_absolute_path (For more details, visit:https://gtfobins.github.io/gtfobins/$binary_name)"
        fi
    done
    IFS=$IFS_OLD
}

#########################################################################
#
    # Add custom section to screen output
    InsertSection "PWN"
#
#################################################################################
#
    # Test        : PWN-0001
    # Description : We show some lines on the screen

    # Register our first custom test
    # We consider it to be a lightweight test (no heavy IO, or long searches), no network connection needed
    Register --test-no PWN-0001 --weight L --network NO --description "A test for check if pwnable programs is available for current user"
    if [ ${SKIPTEST} -eq 0 ]; then
        # The Display function makes it easy to show something on screen, with colors.
        # --indent  defines amount of spaces
        # --text    text to be displayed on screen
        # --result  text at end of line
        # --color   color of result text
        Display --indent 2 --text "- Checking if pwnable programs is available for current user" --result OK --color GREEN
        check_pwnable_binary;
    fi
#
#################################################################################
#

    # First check if OPENSSLBINARY is known as a prerequisite for this test.
    if [ ! -z "${OPENSSLBINARY}" ]; then PREQS_MET="YES"; else PREQS_MET="NO"; fi
    Register --test-no CUST-0001 --preqs-met ${PREQS_MET} --weight M --network NO --description "Description of custom test"
    if [ ${SKIPTEST} -eq 0 ]; then
        FOUNDPROBLEM=0
        DIR="/my/path"
        LogText "Test: we are going to check if we can find a particular directory (${DIR})"
        # Check if a directory exists
        if [ -d ${DIR} ]; then
            LogText "Result: log entry for easier debugging or additional information"
        else
            FOUNDPROBLEM=1
            LogText "Result: directory ${DIR} was not found!"
            ReportWarning "${TEST_NO}" "This is a test warning line" "${DIR}" "text:Create directory ${DIR}"
        fi

        if [ ${FOUNDPROBLEM} -eq 0 ]; then
            Display --indent 2 --text "- Checking if everything is OK..." --result OK --color GREEN
        else
            Display --indent 2 --text "- Checking if everything is OK..." --result WARNING --color RED
            ReportSuggestion ${TEST_NO} "This is a suggestion"
        fi
    fi
#
#################################################################################
#

# Wait for keypress (unless --quick is being used)
WaitForKeyPress

#EOF
